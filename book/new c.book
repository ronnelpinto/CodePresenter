Chapter 1 - A Tutorial Introduction
Let us begin with a quick introduction in C. Our aim is to show the essential elements of the
language in real programs, but without getting bogged down in details, rules, and exceptions.
<pp_code>int main(){printf("why\n");}</pp_code>
At this point, we are not trying to be complete or even precise (save that the examples are
meant to be correct). We want to get you as quickly as possible to the point where you can
write useful programs, and to do that we have to concentrate on the basics: variables and
constants, arithmetic, control flow, functions, and the rudiments of input and output. We are
intentionally leaving out of this chapter features of C that are important for writing bigger
programs. These include pointers, structures, most of C's rich set of operators, several controlflow
statements, and the standard library.
<pp_code>
int main(){printf("why\n");}
</pp_code>
<pp_code>public class Hello{private int a;}</pp_code>
<pp_code>int main(){char a[100], b[100];printf("Enter the string to check if it is a palindrome\n");gets(a);
 strcpy(b,a);strrev(b);
if (strcmp(a,b) == 0)
      printf("Entered string is a palindrome.\n");
 else
      printf("Entered string is not a palindrome.\n");
 
   return 0;
}</pp_code>
This approach and its drawbacks. Most notable is that the complete story on any particular
feature is not found here, and the tutorial, by being brief, may also be misleading. And because
the examples do not use the full power of C, they are not as concise and elegant as they might
be. We have tried to minimize these effects, but be warned. Another drawback is that later
chapters will necessarily repeat some of this chapter. We hope that the repetition will help you
more than it annoys.